Heaps and Heap Sort

Priority Queue
-structure that implements a set S of elements and each of these elements is associated with a key
-certain priorities assigned to queue to have a max, min, insertion point, deletion point, etc.
-trying to optimize asymptotic complexity defition of speed -- does algorithm run in n, log(n), n*log(n), etc. time
-abstract data type associated with these specified operations
-Sets of operations on a priority queue:
	-insert(S,x) -- insert element x into set Sets
	-max(S) -- returns element of S with largest key
	-extract_max(S) -- returns element with largest key and removes it
	-increase_key(S, x, k) -- changes priority of element x in set S by value k (generic representation, could be called update, increment, etc.)
-maintaining a heap allows these operations to be used optimally

Heap:
-an array visualized as a nearly complete binary tree
-ex) 1 2 3 4 5 6 7 8 9 10 (elements)
	 2 4 7 5 6 1 3 9 8 10 (values)
	 
	 Tree representation of just a heap (neither max or min)
					2
				4		7
		5		6		1		3
	9	8	10
-Root is first element corresponding to i = 1
	-parent(i) is i/2
	-left child(i) = 2i
	-right child)i) = 2i + 1
-Types of heaps: max and min heaps
	-max heap property -- key of a node is >= keys of its children
		-trivial operation -- max(S)
		-maintain operations to maintain integrity of data structure
	-min heap property -- key of a node is <= keys of its children
		-trivial operation -- min(S)
-Heap operations that will need to be analyzed based on complexity
	-build_max_heap() -- creates max heap out of unsorted array 
		-max_heapify() -- corrects a single violation of the heap property
		in a subtree's root
		-needs to happen recursively over entire array
	ex) max_heapify(A,i)
	assume that the trees rooted at left(i) and right(i) are max heaps
	16 4 10 14 7 9 7 2 8 1
	-- not a maz heap because 4 is < 14
	- in sorting we will want to know the size of the heap
	- all max_heapify does is swap elements
		1) eschanges A[2] with A[4] -- still violated, 4 > 2 -- call max_heapify again
		2) exchanges A[4] with A[9]
	-complexity of max_heapify is log(n)
		-visualized as nearly complete binary tree, it is not an unbalanced tree
			-height of visualization is bounded by log(n)
			-going level by level builds on log(n)
		-assumption concerning root, left(i) and right(i) negates order n complexity
-build ordered heap using max_heapify
	1) convert array A[1:n] into max heap
		- build_max_heap(A): order(n*log(n))
			for i=n/2 downto 1
				do max_heapify(A,i)
		-additional analysis -- order (n)
			-observe max_heapify takes constant time for nodes that are one level above the leaves
			and in general order L time for nodes that are L levels above the leaf
			-oberve n/4 nodes with level 1, n/8 with level 2, 1 node at log(n) level
				-decrease in nodes as work increases
			-total amount of work in the for loop can be summed as (n/4) * (1C) + (n/8) * (2C) + (n/16)*(3C) + 1(lg(n)*C)
				-set n/4 = 2 ** k
					-translate -- C*(2**k)*((1/2**0)+(2/2**1)+(3/2**2)+((k+1)/2**k))
						-converging series bounded by a constat ~2 < 3
						-key observation to prove it is order(n) -- theta(n)
	Steps:
		1) build_max_heap from unordered array
		2) find max element A[1]
		3) swap elements A[n] with A[i]
			-now max element is at the end of array
		4) Discard node n from heap decrementing heap size
		5) New root may violate max heap but children are max heap 
		repeat recursively
		-outputs each max and decrements heap that is left to output entire list
		-order n*log(n)
		
		
				